import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useRef, useState } from 'react'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [file, setFile] = useState(null)

  const [extractedText, setExtractedText] = useState("")

  const [name, setName] = useState("")
  const [email, setEmail] = useState("")
  const [linkedin, setLinked] = useState("")
  const [phoneNumber, setPhoneNumber] = useState("")
  const [isDatabaseSaved, setIsDatabaseSaved] = useState(false)
  const [isSaving, setIsSaving] = useState(false)

  const inputRef = useRef(null)



  // using nextjs server
  // const handleUploadFile = async (e) => {
  //   e.preventDefault();

  //   if (!file) {
  //     console.error('No file selected');
  //     return;
  //   }

  //   const formData = new FormData();
  //   formData.append('pdfFile', file);

  //   try {
  //     const response = await fetch('/api/extract-text', {
  //       method: 'POST',
  //       body: formData,
  //     });

  //     if (response.ok) {
  //       const data = await response.json();
  //       setExtractedText(data.text);
  //     } else {
  //       console.error('Error extracting text from PDF');
  //     }
  //   } catch (error) {
  //     console.error(error);
  //   }
  // };
  // using nextjs server




  const handleUploadFile = (e) => {
    e.preventDefault()

    setName("")
    setEmail("")
    setLinked("")
    setPhoneNumber("")
    const formData = new FormData();

    formData.append("pdfFile", file);

    fetch("http://localhost:8000/extract-text", {
      method: "post",
      body: formData
    }).then(response => {
      return response.text();
    }).then(extractedText => {

      const texts = extractedText.trim()

      const locationMatch = texts.match(/(\w+,\s\w+)$/m);
      const mobileMatch = texts.match(/(\+?\d{10,15})/);
      if (mobileMatch) {
        setPhoneNumber(mobileMatch[0])
      }

      setExtractedText(texts)

      const textSplit = texts.split('\n')
      filterTexts(textSplit)

    });
  }

  const handleInputChange = (e) => {
    const selectedFile = e.target.files[0]
    setFile(selectedFile)
  }

  const filterTexts = (texts) => {
    setName(texts[0])

    const filterEmail = texts.find(i => i.includes('@'))
    setEmail(filterEmail)

    const filterLinkedIn = texts.find(i => i.includes("linkedin.com"))
    setLinked(filterLinkedIn.trim())


  }

  const handleSaveToDatabase = async () => {
    try {
      setIsSaving(true)
      const response = await fetch('/api/mongodb', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name: name.trim(), email: email.trim(), linkedin: linkedin.trim(), phoneNumber }),
      });
      const result = await response.json();

      if (result.name) {
        alert("Successfully saved to database")
        setIsDatabaseSaved(true)
        setIsSaving(false)
      }
    } catch (error) {
      console.error(error);
    }
  }


  const handleClearAll = () => {
    setName("")
    setEmail("")
    setLinked("")
    setPhoneNumber("")
    setExtractedText("")
    setIsDatabaseSaved(false)
    setIsSaving(false)
    inputRef.current.value = ""
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{ textAlign: 'center', marginTop: "100px" }}>
        <form onSubmit={handleUploadFile}>
          <input ref={inputRef} type="file" id="inpFile" onChange={handleInputChange} />
          <button type="submit" id="btnUpload" disabled={!file} style={{ cursor: "pointer" }}>Upload</button>

        </form>

        <br />
        <br />


        {name && <h2>Name: {name}</h2>}
        {email && <h3>Email: {email}</h3>}
        {linkedin && <h3>LinkedIn: {linkedin}</h3>}
        {phoneNumber && <h3>Mobile: {phoneNumber}</h3>}

        {extractedText && !isSaving && !isDatabaseSaved && <button button style={{ cursor: "pointer", marginTop: "20px" }} onClick={handleSaveToDatabase}>Save to database</button>}
        {isSaving && <button style={{ cursor: "pointer", marginTop: "20px" }} disabled>Saving to database....</button>}
        {isDatabaseSaved && <button button style={{ cursor: "pointer", marginTop: "20px" }} onClick={handleClearAll}>Clear</button>}
      </div >
    </>
  )
}
